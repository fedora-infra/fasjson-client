# coding: utf-8

"""
    Fedora Account Service JSON API

    fajson rest api  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class User(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'login': 'str',
        'surname': 'str',
        'givenname': 'str',
        'mails': 'list[str]',
        'ircnick': 'str',
        'locale': 'str',
        'timezone': 'str',
        'gpgkeyids': 'list[str]',
        'creationts': 'str',
        'locked': 'bool'
    }

    attribute_map = {
        'login': 'login',
        'surname': 'surname',
        'givenname': 'givenname',
        'mails': 'mails',
        'ircnick': 'ircnick',
        'locale': 'locale',
        'timezone': 'timezone',
        'gpgkeyids': 'gpgkeyids',
        'creationts': 'creationts',
        'locked': 'locked'
    }

    def __init__(self, login=None, surname=None, givenname=None, mails=None, ircnick=None, locale=None, timezone=None, gpgkeyids=None, creationts=None, locked=None, local_vars_configuration=None):  # noqa: E501
        """User - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._login = None
        self._surname = None
        self._givenname = None
        self._mails = None
        self._ircnick = None
        self._locale = None
        self._timezone = None
        self._gpgkeyids = None
        self._creationts = None
        self._locked = None
        self.discriminator = None

        if login is not None:
            self.login = login
        if surname is not None:
            self.surname = surname
        if givenname is not None:
            self.givenname = givenname
        if mails is not None:
            self.mails = mails
        if ircnick is not None:
            self.ircnick = ircnick
        if locale is not None:
            self.locale = locale
        if timezone is not None:
            self.timezone = timezone
        if gpgkeyids is not None:
            self.gpgkeyids = gpgkeyids
        if creationts is not None:
            self.creationts = creationts
        if locked is not None:
            self.locked = locked

    @property
    def login(self):
        """Gets the login of this User.  # noqa: E501


        :return: The login of this User.  # noqa: E501
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this User.


        :param login: The login of this User.  # noqa: E501
        :type: str
        """

        self._login = login

    @property
    def surname(self):
        """Gets the surname of this User.  # noqa: E501


        :return: The surname of this User.  # noqa: E501
        :rtype: str
        """
        return self._surname

    @surname.setter
    def surname(self, surname):
        """Sets the surname of this User.


        :param surname: The surname of this User.  # noqa: E501
        :type: str
        """

        self._surname = surname

    @property
    def givenname(self):
        """Gets the givenname of this User.  # noqa: E501


        :return: The givenname of this User.  # noqa: E501
        :rtype: str
        """
        return self._givenname

    @givenname.setter
    def givenname(self, givenname):
        """Sets the givenname of this User.


        :param givenname: The givenname of this User.  # noqa: E501
        :type: str
        """

        self._givenname = givenname

    @property
    def mails(self):
        """Gets the mails of this User.  # noqa: E501


        :return: The mails of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._mails

    @mails.setter
    def mails(self, mails):
        """Sets the mails of this User.


        :param mails: The mails of this User.  # noqa: E501
        :type: list[str]
        """

        self._mails = mails

    @property
    def ircnick(self):
        """Gets the ircnick of this User.  # noqa: E501


        :return: The ircnick of this User.  # noqa: E501
        :rtype: str
        """
        return self._ircnick

    @ircnick.setter
    def ircnick(self, ircnick):
        """Sets the ircnick of this User.


        :param ircnick: The ircnick of this User.  # noqa: E501
        :type: str
        """

        self._ircnick = ircnick

    @property
    def locale(self):
        """Gets the locale of this User.  # noqa: E501


        :return: The locale of this User.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this User.


        :param locale: The locale of this User.  # noqa: E501
        :type: str
        """

        self._locale = locale

    @property
    def timezone(self):
        """Gets the timezone of this User.  # noqa: E501


        :return: The timezone of this User.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this User.


        :param timezone: The timezone of this User.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def gpgkeyids(self):
        """Gets the gpgkeyids of this User.  # noqa: E501


        :return: The gpgkeyids of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._gpgkeyids

    @gpgkeyids.setter
    def gpgkeyids(self, gpgkeyids):
        """Sets the gpgkeyids of this User.


        :param gpgkeyids: The gpgkeyids of this User.  # noqa: E501
        :type: list[str]
        """

        self._gpgkeyids = gpgkeyids

    @property
    def creationts(self):
        """Gets the creationts of this User.  # noqa: E501


        :return: The creationts of this User.  # noqa: E501
        :rtype: str
        """
        return self._creationts

    @creationts.setter
    def creationts(self, creationts):
        """Sets the creationts of this User.


        :param creationts: The creationts of this User.  # noqa: E501
        :type: str
        """

        self._creationts = creationts

    @property
    def locked(self):
        """Gets the locked of this User.  # noqa: E501


        :return: The locked of this User.  # noqa: E501
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this User.


        :param locked: The locked of this User.  # noqa: E501
        :type: bool
        """

        self._locked = locked

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, User):
            return True

        return self.to_dict() != other.to_dict()
